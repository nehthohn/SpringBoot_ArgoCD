{
	"info": {
		"_postman_id": "6439b165-4157-4356-bc74-0df63f3c2b8a",
		"name": "API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34343463"
	},
	"item": [
		{
			"name": "Fetch Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - count, name, and country\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('count');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('country');",
							"});",
							"",
							"",
							"pm.test(\"Probability is within the valid range (0-1)\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.country).to.be.an('array');",
							"    responseData.country.forEach(function(country) {",
							"        pm.expect(country.probability).to.be.within(0, 1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Country array is present and has the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.country).to.be.an('array').and.to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nationalize.io/?name=marti",
					"protocol": "https",
					"host": [
						"api",
						"nationalize",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "marti"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Bad Input",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test bad request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nationalize.io/?name=800",
					"protocol": "https",
					"host": [
						"api",
						"nationalize",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Double Names",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - count, name, and country\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('count');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('country');",
							"});",
							"",
							"",
							"pm.test(\"Count is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.count).to.be.a('number');",
							"    pm.expect(responseData.count).to.satisfy((count) => count >= 0, \"Count should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Country is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.country).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nationalize.io/?name=baume-schneider",
					"protocol": "https",
					"host": [
						"api",
						"nationalize",
						"io"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "name",
							"value": "baume-schneider"
						}
					]
				}
			},
			"response": []
		}
	]
}